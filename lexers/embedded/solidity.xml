<lexer>
  <config>
    <name>Solidity</name>
    <alias>sol</alias>
    <alias>solidity</alias>
    <filename>*.sol</filename>
    <dot_all>true</dot_all>
  </config>
  <rules>
    <state name="strings">
      <rule pattern="hex&#39;[0-9a-fA-F]+&#39;">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="hex&#34;[0-9a-fA-F]+&#34;">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="&#34;">
        <token type="LiteralString"/>
        <combined state="string-parse-common" state="string-parse-double"/>
      </rule>
      <rule pattern="&#39;">
        <token type="LiteralString"/>
        <combined state="string-parse-common" state="string-parse-single"/>
      </rule>
    </state>
    <state name="numbers">
      <rule pattern="0[xX][0-9a-fA-F]+">
        <token type="LiteralNumberHex"/>
      </rule>
      <rule pattern="[0-9]+">
        <token type="LiteralNumberInteger"/>
      </rule>
    </state>
    <state name="root">
      <rule>
        <include state="comments"/>
      </rule>
      <rule>
        <include state="keywords-types"/>
      </rule>
      <rule>
        <include state="keywords-other"/>
      </rule>
      <rule>
        <include state="numbers"/>
      </rule>
      <rule>
        <include state="strings"/>
      </rule>
      <rule>
        <include state="whitespace"/>
      </rule>
      <rule pattern="\+\+|--|\*\*|\?|:|~|&amp;&amp;|\|\||=&gt;|==?|!=?|(&lt;&lt;|&gt;&gt;&gt;?|[-&lt;&gt;+*%&amp;|^/])=?">
        <token type="Operator"/>
      </rule>
      <rule pattern="[{(\[;,]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern="[})\].]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern="(abi|block|msg|tx)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(?!abi\.)(decode|encode|encodePacked|encodeWithSelector|encodeWithSignature|encodeWithSelector)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(?!block\.)(chainid|coinbase|difficulty|gaslimit|number|timestamp)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(?!msg\.)(data|gas|sender|value)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(?!tx\.)(gasprice|origin)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(type)(\()([a-zA-Z_]\w*)(\))">
        <bygroups>
          <token type="NameBuiltin"/>
          <token type="Punctuation"/>
          <token type="NameClass"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="(?!type\([a-zA-Z_]\w*\)\.)(creationCode|interfaceId|max|min|name|runtimeCode)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(now|this|super|gasleft)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(selfdestruct|suicide)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(?!0x[0-9a-fA-F]+\.)(balance|code|codehash|send|transfer)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(assert|revert|require)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(call|callcode|delegatecall)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="selector\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(addmod|blockhash|ecrecover|keccak256|mulmod|ripemd160|sha256|sha3)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="[a-zA-Z_]\w*">
        <token type="Name"/>
      </rule>
    </state>
    <state name="keywords-types">
      <rule pattern="(address|ufixed|string|bytes|fixed|byte|bool|uint|int)\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="(int[0-9]{1,3})\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="(uint[0-9]{1,3})\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="(bytes[0-9]{1,3})\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="(fixed[0-9]{1,3}x[0-9]{1,3})\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="(ufixed[0-9]{1,3}x[0-9]{1,3})\b">
        <token type="KeywordType"/>
      </rule>
    </state>
    <state name="string-parse-double">
      <rule pattern="&#34;">
        <token type="LiteralString"/>
        <pop depth="1"/>
      </rule>
      <rule pattern="&#39;">
        <token type="LiteralString"/>
      </rule>
    </state>
    <state name="string-parse-single">
      <rule pattern="&#39;">
        <token type="LiteralString"/>
        <pop depth="1"/>
      </rule>
      <rule pattern="&#34;">
        <token type="LiteralString"/>
      </rule>
    </state>
    <state name="whitespace">
      <rule pattern="\s+">
        <token type="Text"/>
      </rule>
    </state>
    <state name="keywords-other">
      <rule pattern="(continue|returns|storage|memory|delete|return|throw|break|catch|while|else|from|new|try|for|if|is|as|do|in|_)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="assembly\b">
        <token type="Keyword"/>
        <push state="assembly"/>
      </rule>
      <rule pattern="(contract|interface|enum|event|struct)(\s+)([a-zA-Z_]\w*)">
        <bygroups>
          <token type="KeywordDeclaration"/>
          <token type="Text"/>
          <token type="NameClass"/>
        </bygroups>
      </rule>
      <rule pattern="(function|modifier)(\s+)([a-zA-Z_]\w*)">
        <bygroups>
          <token type="KeywordDeclaration"/>
          <token type="Text"/>
          <token type="NameFunction"/>
        </bygroups>
      </rule>
      <rule pattern="(constructor|interface|contract|modifier|function|library|mapping|struct|event|enum|var)\b">
        <token type="KeywordDeclaration"/>
      </rule>
      <rule pattern="(abstract|external|internal|private|public)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="(anonymous|immutable|constant|override|indexed|payable|virtual|pure|view)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="(import|using)\b">
        <token type="KeywordNamespace"/>
      </rule>
      <rule pattern="pragma (solidity|experimental)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="(relocatable|implements|unchecked|reference|supports|typedef|promise|default|partial|mutable|switch|typeof|sealed|inline|copyof|define|static|sizeof|alias|final|match|apply|macro|after|auto|null|case|let|of)\b">
        <token type="KeywordReserved"/>
      </rule>
      <rule pattern="(true|false)\b">
        <token type="KeywordConstant"/>
      </rule>
      <rule pattern="(wei|finney|szabo|ether)\b">
        <token type="KeywordConstant"/>
      </rule>
      <rule pattern="(seconds|minutes|hours|days|weeks|years)\b">
        <token type="KeywordConstant"/>
      </rule>
    </state>
    <state name="comments">
      <rule pattern="//([\w\W]*?\n)">
        <token type="CommentSingle"/>
      </rule>
      <rule pattern="/[*][\w\W]*?[*]/">
        <token type="CommentMultiline"/>
      </rule>
      <rule pattern="/[*][\w\W]*">
        <token type="CommentMultiline"/>
      </rule>
    </state>
    <state name="assembly">
      <rule>
        <include state="comments"/>
      </rule>
      <rule>
        <include state="numbers"/>
      </rule>
      <rule>
        <include state="strings"/>
      </rule>
      <rule>
        <include state="whitespace"/>
      </rule>
      <rule pattern="\{">
        <token type="Punctuation"/>
        <push/>
      </rule>
      <rule pattern="\}">
        <token type="Punctuation"/>
        <pop depth="1"/>
      </rule>
      <rule pattern="[(),]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern=":=|=:">
        <token type="Operator"/>
      </rule>
      <rule pattern="(let)(\s*)(\w*\b)">
        <bygroups>
          <token type="OperatorWord"/>
          <token type="Text"/>
          <token type="NameVariable"/>
        </bygroups>
      </rule>
      <rule pattern="(\w*\b)(\:[^=])">
        <bygroups>
          <token type="NameLabel"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="(stop|add|mul|sub|div|sdiv|mod|smod|addmod|mulmod|exp|signextend|lt|gt|slt|sgt|eq|iszero|and|or|xor|not|byte|keccak256|sha3|address|balance|origin|caller|callvalue|calldataload|calldatasize|calldatacopy|codesize|codecopy|gasprice|extcodesize|extcodecopy|blockhash|coinbase|timestamp|number|difficulty|gaslimit|pop|mload|mstore|mstore8|sload|sstore|for|switch|jump|jumpi|pc|msize|gas|jumpdest|push1|push2|push32|dup1|dup2|dup16|swap1|swap2|swap16|log0|log1|log4|create|call|callcode|return|delegatecall|suicide|returndatasize|returndatacopy|staticcall|revert|invalid)\b">
        <token type="NameFunction"/>
      </rule>
      <rule pattern="[a-zA-Z_]\w*">
        <token type="Name"/>
      </rule>
    </state>
    <state name="string-parse-common">
      <rule pattern="\\(u[0-9a-fA-F]{4}|x..|[^x])">
        <token type="LiteralStringEscape"/>
      </rule>
      <rule pattern="[^\\&#34;\&#39;\n]+">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="\\\n">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="\\">
        <token type="LiteralString"/>
      </rule>
    </state>
  </rules>
</lexer>
